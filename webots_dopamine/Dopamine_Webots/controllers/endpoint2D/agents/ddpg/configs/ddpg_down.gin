# Hyperparameters follow the classic Nature DQN, but we modify as necessary to
# match those used in Rainbow (Hessel et al., 2018), to ensure apples-to-apples
# comparison.
import run_experiment
# import agents.ddpg.ddpg_agent
import agents.ddpg.ddpg_agent_s
import replay_memory.circular_replay_buffer
import gin.tf.external_configurables

DDPGAgent.gamma = 0.9
DDPGAgent.update_horizon = 1
DDPGAgent.min_replay_history = 30000  # agent steps
DDPGAgent.update_period = 1

# DDPGAgent.target_update_period = 8000  # agent steps
DDPGAgent.target_update_period = 1  # agent steps

DDPGAgent.epsilon_train = 0.001
DDPGAgent.epsilon_eval = 0.001

# DDPGAgent.epsilon_decay_period = 250000  # agent steps
DDPGAgent.epsilon_decay_period = 100000  # agent steps

DDPGAgent.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version
# DDPGAgent.tf_device = '/cpu:*'
# DDPGAgent.optimizer = @tf.train.RMSPropOptimizer()
DDPGAgent.optimizer = @tf.train.AdamOptimizer()

# tf.train.RMSPropOptimizer.learning_rate = 0.00025
# tf.train.RMSPropOptimizer.decay = 0.95
# tf.train.RMSPropOptimizer.momentum = 0.0
# tf.train.RMSPropOptimizer.epsilon = 0.00001
# tf.train.RMSPropOptimizer.centered = True
tf.train.AdamOptimizer.learning_rate = 0.0005

# Runner.game_name = 'Pong'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
run_experiment_down.Runner.sticky_actions = False
# tf.train.RMSPropOptimizer.epsilon = 0.00001
run_experiment_down.Runner.num_iterations = 200

# Runner.training_steps = 250000  # agent steps
run_experiment_down.Runner.training_steps = 10000

# Runner.evaluation_steps = 125000  # agent steps
run_experiment_down.Runner.evaluation_steps = 2000

# Runner.max_steps_per_episode = 27000  # agent steps
run_experiment_down.Runner.max_steps_per_episode = 100

WrappedReplayBuffer.replay_capacity = 30000
WrappedReplayBuffer.batch_size = 32
